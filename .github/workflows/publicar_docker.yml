name: Build and Publish Docker Image
on:
  push:
    branches:
      - main
  create:
    tags:
      - 'v*'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Necessário para o SonarCloud buscar o histórico completo
          fetch-depth: 0  

      # --- PASSOS DE BUILD E ANÁLISE SONAR ---
      # É preciso configurar o Java e compilar o projeto
      # ANTES de rodar a análise do SonarCloud.

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        # Este comando compila o projeto, roda testes e gera os binários
        # necessários para a análise do Sonar.
        # Ajuste "pom.xml" se seu arquivo tiver outro nome.
        run: mvn -B verify --file pom.xml

      - name: Análise de código SonarCloud
        # Este passo agora está no nível correto (não dentro de outro 'with:')
        # e é executado após o 'Build with Maven'.
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.java.binaries=target/classes
        env:
          # O GITHUB_TOKEN é necessário para o SonarCloud
          # decorar os Pull Requests
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # --- PASSOS DO DOCKER (após a análise) ---

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/pokedex

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
            
      - name: Save Docker image to a file
        run: |
          echo "Salvando a imagem em pokedex-image.tar..."
          # É preciso garantir que estamos salvando as tags corretas
          # O 'docker save' pode falhar se 'steps.meta.outputs.tags' estiver vazio ou tiver múltiplas tags
          # Vamos usar a primeira tag gerada como referência, se disponível
          FIRST_TAG=$(echo "${{ steps.meta.outputs.tags }}" | cut -d ',' -f 1)
          if [ -n "$FIRST_TAG" ]; then
            docker save -o pokedex-image.tar "$FIRST_TAG"
          else
            echo "Nenhuma tag do Docker foi gerada. Pulando o 'docker save'."
            # Opcional: criar um arquivo vazio para não falhar o upload
            touch pokedex-image.tar
          fi
      
      - name: Upload image as a workflow artifact
        uses: actions/upload-artifact@v4
        with:
          name: pokedex-docker-image
          path: pokedex-image.tar
